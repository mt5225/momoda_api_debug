
// ---------------------------------------------------------
// 1 Move Object, support select and multi-select
// mouse click: select objectï¼›
// mouse click and move: move object;
// mouse click and move + shift: lift object; 
// mouse click and move + shift: rotate object; 
// 
// 2 draw line
// mouse left click: begin draw line 
// mouse left click then right click: finish line 
//
// 3 draw area 
// mouse left click: begin draw area;
// mouse left click then right click: finish area;
// ---------------------------------------------------------

// create boxes
for (var x = -4; x < 4; x ++) {
    for (var y = -4; y < 4; y ++) {
        var obj = object.create("AB052B5B646E4A48B9C045096FF9B088", Vector3(x*2, 0.2, y*2));

        // add to selection candidate set
        selector.addCandidate(obj);
    }
}

// ---------------------------------------------------------
// drag objecct 
dragObjState = {

    // drag target
    dragObj: null,

    // save last mouse position 
    lastPoint: Vector2.zero,

    // start point 
    startPos: Vector3.zero,

    // rotation center 
    rotCenter: Vector3.zero,

    // move target 
    function pan() {
        // get horizontal plane 
        var plane = Plane(Vector3.up, this.dragObj.pos)
        var result = picking.raycast( plane );
        if (!result.picked)
            return;

        // set position 
        var delta = result.point - this.startPos;
        for(var i = 0; i < selector.selectedList.Count; i ++) {
            var obj = selector.selectedList.get_Item(i);
            var newPos = obj.initPos + delta;
            obj.setPositionXZ(newPos.x, newPos.z);
        }
    }

    // lift object 
    function lift() {
        //  get vertical plane 
        var plane = Plane(camera.backward, this.dragObj.pos);
        var result = picking.raycast( plane ); 
        if (!result.picked)
            return;

        // set position 
        var delta = result.point - this.startPos;
        for(var i = 0; i < selector.selectedList.Count; i ++) {
            var obj = selector.selectedList.get_Item(i);
            var newPos = obj.initPos + delta;
            obj.setPositionY(newPos.y);
        }
    }
    
    // rotate target
    function rotate(ox, oy) {
        var y = Math.Abs(ox) > Math.Abs(oy) ? -ox : oy; 

        var angle = 15 * y * Time.deltaTime;
        for(var i = 0; i < selector.selectedList.Count; i ++) {
            var obj = selector.selectedList.get_Item(i);
            obj.rotateAround(this.rotCenter, Vector3.up, angle);
        }
    }

    // enter moving mode 
    function onenter() {
        selector.enabled = true;
    }

    // exist moving mode
    function onleave() {
        selector.enabled = false;
        selector.ClearSelection();
    }

    // start dragging 
    function ondragstart(event) {
        if (event.obj == null || !event.obj.selected)
            return;

        this.dragObj = event.obj;

        // save selected objects position and calculate center
        this.rotCenter = Vector3.zero;
        for(var i = 0; i < selector.selectedList.Count; i ++) {
            var obj = selector.selectedList.get_Item(i);
            obj.holdPos();
            this.rotCenter = this.rotCenter + obj.pos;
        }
        this.rotCenter = this.rotCenter / selector.selectedList.Count;

        // save start position
        var plane = Plane(Vector3.up, this.dragObj.pos);
        var result = picking.raycast( plane ); // level
        if (result.picked)
            this.startPos = result.point;

        // save screen postion 
        this.lastPoint = Vector2(event.x, event.y);

        // turn off camera control
        camera.setCtrlEnabled(false);
    }
    
    //  dragging
    function ondrag(event) {
        if (!this.dragObj)
            return;

        if (event.button == 0) {
            // lift
            if (event.shiftKey)
                this.lift();
            // rotation 
            else if (event.ctrlKey)
                this.rotate( event.x - this.lastPoint.x, event.y - this.lastPoint.y);
            // move
            else
                this.pan();
        }

        this.lastPoint = Vector2(event.x, event.y);
    }

    // mouse release
    function ondragend(event) {
        if (this.dragObj) {
            camera.setCtrlEnabled(true);
            this.dragObj = null;
        }
    }

}

// ---------------------------------------------------------
// draw curve
drawCurveState = {
    curve : null,
    pickedPos : null,

    // enter draw mode
    function onenter() {
        CurveLine.IsEditMode = true;
    }

    // exit draw mode
    function onleave() {
        CurveLine.IsEditMode = false;
    }

    function pick() {
        var plane = Plane(Vector3.up, FloorPlan.current.pos); // level
        var result = picking.raycast(plane);
        if (!result.picked)
            return false;

        var pos = result.point;
        this.pickedPos = Vector3(pos.x, pos.y + 0.1, pos.z);
        return true;
    }

    function put() {
        if (!this.pick())
            return;

        // create curve
        if (this.curve == null) {
            var vecList = Vector3List();
            vecList.Add(this.pickedPos);
            vecList.Add(this.pickedPos);
            this.curve = object.createCurveLine(vecList);
            selector.addCandidate(this.curve);
        } 
        // update curve
        else {
            this.curve.addPoint(this.pickedPos);
            this.curve.build();
        }
    }
    
    function update() {
        if (this.curve == null || !this.pick())
            return;

        // set last mouse position
        this.curve.setLastPoint(this.pickedPos);
        
        // update whole line
        this.curve.refresh();
        this.curve.build();        
    }
    
    function finish() {
        if (this.curve == null)
            return;
            
        // remove if only two points in array
        if(this.curve.points.Count == 2) {
            this.curve.destroy();
        } 
        // remove last point
        else {

            this.curve.removeLastPoint();
            this.curve.build();
        }
        this.curve = null;  
    }
    
    function onclick(event) {          
        if (event.button == 0) {
            this.put();
            camera.setCtrlEnabled(false);
        } else if (event.button == 1) {
            this.finish();
            camera.setCtrlEnabled(true);
            // go back to draw mode
            state.change( dragObjState );
            swichButton.selected = 0;
        }
    }
    
    function onmousemove(event) {
        this.update();
    }
}


// ---------------------------------------------------------
// draw area
drawPolygonState = {
    vectorLine : null,
    polygon:null,
    pickedPos : null,

    function pick() {
        var plane = Plane(Vector3.up, FloorPlan.current.pos); // horizontal plane
        var result = picking.raycast(plane);
        if (!result.picked)
            return false;
        this.pickedPos = result.point + Vector3(0, 0.1, 0);
        return true;
    }

    function put() {
        if (!this.pick())
            return;

        // create 
        if (this.vectorLine == null) {
            var vecList = Vector3List();
            vecList.Add(this.pickedPos);
            vecList.Add(this.pickedPos);
            this.vectorLine = util.createVectorLine(vecList);
        } 
        // update
        else {
            this.vectorLine.points3.Add(this.pickedPos);
        }
    }
    
    function update() {
        if (this.vectorLine == null || !this.pick())
            return;

        // set last mouse position
        this.vectorLine.points3.RemoveAt(this.vectorLine.points3.Count-1);
        this.vectorLine.points3.Add(this.pickedPos);
    }
    
    function finish() {
        if (this.vectorLine == null)
            return;
            
        // remove if only two points in array
        if(this.vectorLine.points3.Count >2) {
            var idx = this.vectorLine.points3.Count-1;
            this.vectorLine.points3.RemoveAt(idx);
            this.polygon = object.createPolygon(this.vectorLine.points3, {
                "color":Color(1,0,0,0.5)
            });
            this.polygon.build();
            selector.addCandidate(this.polygon);
        } 
        // remove last point
        else {
            this.vectorLine.removeLastPoint();
            this.vectorLine.build();
        }
        var lineList =VectorLineList();
        lineList.Add(this.vectorLine);
        VectorLine.Destroy(lineList);
        this.vectorLine = null;  
    }
    
    function onclick(event) {          
        if (event.button == 0) {
            this.put();
            camera.setCtrlEnabled(false);
        } else if (event.button == 1) {
            this.finish();
            camera.setCtrlEnabled(true);
            // go back to draw mode
            state.change( dragObjState );
            swichButton.selected = 0;
        }
    }
    
    function onmousemove(event) {
        this.update();
    }

}


// ---------------------------------------------------------
// status object
state = {
    current : null,
    
    function change(st) {
        if (this.current == st)
            return;

        // exit previous status
        if (this.current && st != this.current) {
            if (this.current["onleave"])
                this.current["onleave"]();
            this.current = null;
        }

        // enter status
        if (st) {
            if (st["onenter"])
                st["onenter"]();
            this.current = st;
            //print("change state: "+dragObjState);
        }
    }

    function handleEvent(event) {
        if (!this.current)    
            return;
            
        // handle event
        var funcName = "on" + event.type;
        if (this.current[funcName])
            this.current[funcName](event);
    }
}

// init status
state.change( dragObjState );

// ---------------------------------------------------------
// register event

// drag start event
util.addEventListener("dragstart", function(event) {
    state.handleEvent(event);
});

// drag event
util.addEventListener("drag", function(event) {
    state.handleEvent(event);
});

// drag end event
util.addEventListener("dragend", function(event) {
    state.handleEvent(event);
});

// mouse down event
var downPos = null;
util.addEventListener("mousedown", function(event) {
    if (gui.isOverAny())
        return;
    downPos = Vector2(event.x, event.y);
});

// mouse click event
util.addEventListener("click", function(event) {
    if (Vector2.Distance(downPos, Vector2(event.x, event.y)) > 4 || !event.target)
        return;
        
    if (gui.isOverAny())
        return;
    
    state.handleEvent(event);
});

// mouse move event
util.addEventListener("mousemove",function(event) {
    state.handleEvent(event);
});

// delete
util.addEventListener("keydown", function(event) {
    if (event.key == KeyCode.Delete) {
        selector.destroySelection();
    }
});

// ---------------------------------------------------------
// UI
swichButton = gui.createSwitch(Rect(50, Screen.height - 200, 400, 64), 0, ["Drag Objects", "Draw Line", "Draw Area"], function(sw){
    switch(sw) {
        case 0: state.change( dragObjState ); break;
        case 1: state.change( drawCurveState ); break;
        case 2: state.change( drawPolygonState ); break;
    }
});

